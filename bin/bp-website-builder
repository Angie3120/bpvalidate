#!/usr/bin/perl -w

use utf8;
use strict;
use EOSN::Report;
use EOSN::FileUtil qw(read_file write_file);
use File::Slurp qw(read_dir);
use File::Find;

binmode(STDOUT, ":utf8");

# ---------------------------------------------------------------------------
# Main

my %generated;
my %globals;
my $labels;
get_report_options_website();
my $outdir = outdir();
read_globals();
go();

# ---------------------------------------------------------------------------
# Subroutines

sub read_globals {
	$globals{"template"} = read_file ("$outdir/res/template.html");
	$globals{generated_at} = time2str ("%C", time);

	$labels = labels ();

	foreach my $file (read_dir ("$outdir/res/maintainer")) {
		my ($maintainer, $lang) = (split (/\./, $file))[0,2];
		$$labels{"maintainer_$maintainer"}{"label_$lang"} = read_file ("$outdir/res/maintainer/$file");
	}

        foreach my $chain (chains()) {
		my $properties = chain_properties ($chain);
		next if (! $$properties{active});

		# ---------- navigation

		$generated{navigation_producers} .= nav_link ($chain, 'producers') . "\n";
		$generated{navigation_reports} .= nav_link ($chain, 'reports') . "\n";
		$generated{navigation_info} .= nav_link ($chain, 'info') . "\n";
		$generated{networks} .= (' ' x 4) . '<li> <a href="' . $chain . '/">%chain_' . $chain . '%</a>' . "\n";

		# --------- list of active reports

		my $xproperties;
                foreach my $property (keys %$properties) {
                        next if ($property !~ /^report_/);
                        next if (! $$properties{$property});
			$$xproperties{$property} = $$properties{$property};
		}
                foreach my $property (sort {$$xproperties{$a} <=> $$xproperties{$b}} keys %$xproperties) {
                        my $report = $property;
                        $report =~ s/^report_//;
			$generated{"report_list_$chain"} .= (' ' x 2) . '<li><a href="' . $report . '.html">%title_reports/' . $report . '%</a>' . "\n";
		}
	}
}

sub go {
	my $dir = $outdir;
	my $chain = chain ();
	if ($chain) {
		$dir = "$dir/$chain";
	}
	find({wanted => \&generate_content, no_chdir => 1}, $dir);
}

sub generate_content {
	return if ($_ !~ /\.thtml.\w\w$/);
	my $filename_in = $File::Find::name;
	my $filename_out = $filename_in;
	$filename_out =~ s/\.thtml.(\w\w)$/.html.$1/;
	return if ($filename_in =~ m#${outdir}res/#);
	my $lang = $1;
	#print "generate file=<$filename_in> lang=<$lang>\n";
	my (@content) = read_file ($filename_in);

	my $header = 1;
	my %variables;
	foreach my $line (@content) {
		if ($line =~ /^$/ && $header) {
			$header = 0;
		} elsif ($header) {
			my ($key, $value) = split (/\s*=\s*/, $line, 2);
			$variables{$key} = $value;
		} else {
			$variables{content} .= "$line\n";
		}
	}

	my $output = $globals{template};
	$globals{lang} = $lang;
	$globals{last_update} = datetime($globals{generated_at}, $lang);
	if ($variables{chain}) {
		$globals{chain_plain} = $variables{chain};
		$globals{chain} = $$labels{'chain_' . $variables{chain}}{"label_$lang"} || $variables{chain};
		$globals{chain_title} = ($$labels{'chain_' . $variables{chain}}{"label_$lang"} || $variables{chain}) . ": ";
		$generated{report_list} = $generated{'report_list_' . $variables{chain}};

		my $properties = chain_properties ($variables{chain});
		foreach my $key (qw (filename chain_id core_symbol)) {
			$generated{"config_$key"} = $$properties{$key};
		}
		$generated{maintainer} = '%maintainer_' . $$properties{maintainer} . '%';
	} else {
		$globals{chain} = '--';
		$globals{chain_title} = '';
	}

	foreach my $key (keys %variables) {
		my $value = $variables{$key};
		$output =~ s/%$key%/$value/g;
	}

	foreach my $key (keys %generated) {
		my $value = $generated{$key};
		$output =~ s/%$key%/$value/g;
	}

	foreach my $key (keys %$labels) {
		my $value = $$labels{$key}{"label_$lang"} || $$labels{$key}{"label_en"};
		if (! defined $value) {
			die "$0: cannot get label for key=<$key>\n";
		}
		$output =~ s/%$key%/$value/g;
	}

	foreach my $key (keys %globals) {
		my $value = $globals{$key};
		$output =~ s/%$key%/$value/g;
	}	

	write_file ($filename_out, $output);
}

sub nav_link {
	my ($chain, $url) = @_;

	return (' ' x 8) . '<a class="navbar-item" href="/' . $chain . '/' . $url . '/"><img class="navbar-image" src="/res/chains/' . $chain . '.png" alt=""> %chain_' . $chain . '%</a>';
}
