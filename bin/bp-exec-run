#!/usr/bin/perl -w

use utf8;
use strict;
use EOSN::Report;
use File::Touch qw(touch);

binmode(STDOUT, ":utf8");

# ---------------------------------------------------------------------------
# Main

get_report_options_website();
my $confdir = confdir();
my $outdir = outdir();
go();

# ---------------------------------------------------------------------------
# Subroutines

sub go {
	foreach my $chain (chains()) {
		my $properties = chain_properties ($chain);
		next if (! $$properties{active});

		print "--------- run chain: $chain ----------\n";
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=alohaeosprod,eosnationftw,cryptolions1,eoscanadacom,bitfinexeos1,hexlantttttt,eosriobrazil,acroeos12345,eosriobrazil");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=cryptolions1");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=eosnationftw,teamgreymass,eosbeijingbp,sheos21sheos,eosriobrazil,eosswedenorg");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=eosliquideos,eosauthority,eosnationftw,atticlabeosb,cryptolions1,eosbeijingbp,eostribeprod,sheos21sheos,eosswedenorg");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=eosnationftw,bosnationftw,kainosblkpro,eosiodetroit,bosriobrazil,boseouldotio");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=bosnationftw,bosriobrazil,boseouldotio");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=none");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=eosnationftw");
		#run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000 --debug --producer=alohaeosprod");
		run_command ("bp-validate --chain=$chain --output=$outdir/$chain/bps.json --versions=$confdir/versions_${chain}.csv --chains=$confdir/chains.csv --limit=1000");

		foreach my $property (keys %$properties) {
			next if ($property !~ /^report_/);
			next if (! $$properties{$property});
			my $report = $property;
			$report =~ s/_/-/g;
			$report =~ s/^report/bp-report/;

			print "--------- run report: $chain $report ----------\n";

			run_command ("$report --chain=$chain --input=$outdir/$chain/bps.json --out=$outdir --config=$confdir");
		}

		print "--------- run report: $chain producers ----------\n";

		run_command ("bp-report-producers --chain=$chain --input=$outdir/$chain/bps.json --out=$outdir --config=$confdir");

		print "---------- generate website: -----------\n";

		foreach my $lang (languages()) {
			my $xfile = "$outdir/about/index.thtml.$lang";
			#print "touch file=<$xfile>\n";
			touch ($xfile);
		}

		run_command ("bp-website-builder --out=$outdir --config=$confdir");
	}
}

sub run_command {
	my ($command) = @_;

	print ">> $command\n";
	system ($command);
}
