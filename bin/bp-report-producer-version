#!/usr/bin/perl -w

use utf8;
use strict;
use EOSN::Report;

binmode(STDOUT, ":utf8");

# --------------------------------------------------------------------------
# Main

my $data = get_report_options ();
my $chain = chain ();
my $properties = chain_properties ($chain);
my %kinds;

foreach my $entry (@{$$data{producers}}) {
	my ($key, $value) = get_version ($entry);
	$kinds{$key} = $value;
}

foreach my $lang (languages()) {
	foreach my $content_type (content_types()) {
		my @report;
		foreach my $kind (reverse sort keys %kinds) {
			my @section;

			foreach my $entry (@{$$data{producers}}) {
				my $producer = $$entry{regproducer}{owner};
				my $important_bp = is_important_bp ($entry);
				my ($key, $value) = get_version ($entry);
				next if ($key ne $kind);

				if ($key ne 'zzunknown' || $important_bp) {
					push (@section, {
						producer => $producer,
						sprintf => "%s",
						data => [($$entry{output}{chain}{version_string} || 'n/a')]
					});
				}
			}

			push (@report, {name => $kinds{$kind}, rows => \@section});
		}

		generate_report (chain => $chain, lang => $lang, content_type => $content_type, data => $data, report => \@report, columns => 1, outfile => "reports/producer_version", text => 1, html => 1);
	}
}

sub get_version {
	my ($entry) = @_;

	my $value = $$entry{output}{chain}{result_version} || 'zzunknown';
	my $key = $value;
	if ($key =~ /^[0-9.]*\s+/) {
		my ($version, $details) = split (/\s+/, $key, 2);
		my (@parts) = split (/\./, $version);
		$key = sprintf ("zzz %03d %03d %03d %s", $parts[0], $parts[1], $parts[2], $details);
	}

	return ($key, $value);
}
