#!/usr/bin/perl -w

use utf8;
use strict;
use JSON;
use Parallel::ForkManager;
use EOSN::SQL qw(do_connect);
use EOSN::Validator;
use EOSN::FileUtil qw(write_file read_csv_hash);
use EOSN::UA qw(eosn_normal_ua eosn_cache_ua get_table);
use Date::Format qw(time2str);
use Getopt::Long;

binmode(STDOUT, ":utf8");

# ---------------------------------------------------------------------------
# Main

my $chain = undef;
my $max_processes = 8;
my $filter_producer = undef;
my $outfile = undef;
my $versionsfile = undef;
my $chainsfile = undef;
my $limit = 1000;
my $debug = 0;
my $globals;

GetOptions('chain=s' => \$chain, 'max_processes=i' => \$max_processes, 'producer=s' => \$filter_producer, 'output=s' => \$outfile, 'versions=s' => \$versionsfile, 'chains=s' => \$chainsfile, 'limit=i' => \$limit, 'debug' => \$debug) || exit 1;

my %filter_producers = map {$_ => 1} split (/,/, $filter_producer || '');
if (! defined $versionsfile) {
	die "$0: $chain: versions file not provided";
}
my $versions = read_csv_hash ($versionsfile, 'hash');
my $chains = read_csv_hash ($chainsfile, 'name');
my $base_url = $$chains{$chain}{url};

print "read from url=<$base_url>\n";

setup_jobs();
run_validation();
write_results();

# ---------------------------------------------------------------------------
# Subroutines

sub setup_jobs {
	my $ua = eosn_normal_ua();
	my $dbh = do_connect('validate');
	my $rank = 0;
	my %onchain;

	$globals = get_table ($ua, $base_url . '/v1/chain/get_table_rows', limit => $limit, code => "eosio", scope => "eosio", table => "global");
	if (! $globals) {
		die "$0: $chain: cannot get global list";
	}
	$globals = $$globals[0];

	my $producer_list = get_table ($ua, $base_url . '/v1/chain/get_producers', limit => $limit);

	if (! $producer_list) {
		die "$0: $chain: cannot get producer list";
	}

	# ---- on-chain json

	my $onchainbpjson_list = [];

	if ($$chains{$chain}{class_bpjson}) {
		my $code = $$chains{$chain}{test_bpjson_code};
		my $scope = $$chains{$chain}{test_bpjson_scope};
		my $table = $$chains{$chain}{test_bpjson_table};

		$onchainbpjson_list = get_table ($ua, $base_url . '/v1/chain/get_table_rows', limit => $limit, code => $code, scope => $scope, table => $table);

		if (! $onchainbpjson_list) {
			warn "$0: $chain: cannot get onchainbpjson list";
		}

		foreach my $obj (@$onchainbpjson_list) {
			my $owner = $$obj{owner};
			my $json = $$obj{json};
			$onchain{bpjson}{$owner} = $json;
		}
	}

	# ---- on-chain heartbeat

	my $onchainheartbeat_list = [];

	if ($$chains{$chain}{class_heartbeat}) {
		$onchainheartbeat_list = get_table ($ua, $base_url . '/v1/chain/get_table_rows', limit => $limit, code => "eosheartbeat", scope => "eosheartbeat", table => "hbstruct");

		if (! $onchainheartbeat_list) {
			warn "$0: $chain: cannot get onchainheartbeat list";
		}

		foreach my $obj (@$onchainheartbeat_list) {
			my $user = $$obj{user};
			my $json = $$obj{metadata_json};
			my $timestamp = $$obj{timestamp};
			$onchain{heartbeat}{$user}{json} = $json;
			$onchain{heartbeat}{$user}{timestamp} = $timestamp;
		}
	}

	# ---- on-chain blacklist

	my $onchainblacklist_list = [];

	if ($$chains{$chain}{class_blacklist}) {
		$onchainblacklist_list = get_table ($ua, $base_url . '/v1/chain/get_table_rows', limit => $limit, code => "theblacklist", scope => "theblacklist", table => "producerhash");

		if (! $onchainblacklist_list) {
			warn "$0: $chain: cannot get onchainblacklist list";
		}

		foreach my $obj (@$onchainblacklist_list) {
			my $user = $$obj{producer};
			my $hash = $$obj{hash};
			$onchain{blacklist}{$user} = $hash;
		}
	}

	# ----- votes

	my $vote_total = 0;
	foreach my $entry (@{$producer_list}) {
		next if (! $$entry{is_active});
		$vote_total += $$entry{total_votes};
	}

	# ---- go

	$dbh->do("update producer_$chain set status = 'hold'");
	my $data = $dbh->selectall_hashref("select * from producer_$chain", 'producer');

	foreach my $entry (@{$producer_list}) {
		$rank++;
		my $owner = $$entry{owner};

		if (! $$data{$owner}) {
			$dbh->do("insert into producer_$chain (producer, status, checked_at, regproducer_at) values (?, ?, ?, ?)", {}, $owner, 'hold', 0, time);
			my $id = $dbh->last_insert_id();
			$$data{$owner}{id} = $id;
			$$data{$owner}{status} = 'hold';
			$$data{$owner}{checked_at} = 0;
		}

		my $vote_percent = 0;
		if ($$entry{is_active}) {
			$vote_percent = $$entry{total_votes} / $vote_total * 100;
		}

		my $state;
		if (! $filter_producer) {
			print ">> normal $$entry{owner}\n" if ($debug);
			$state = 'check' if ($$data{$owner}{checked_at} < time - 1500);
		} elsif (exists $filter_producers{$$entry{owner}}) {
			print ">> force $$entry{owner}\n" if ($debug);
			$state = 'check';
		}

		$dbh->do("update producer_$chain set status = ?, regproducer_at = ?, regproducer_data = ?, regproducer_rank = ?, regproducer_vote_percent = ?, 
			onchainbpjson_enabled = ?, onchainbpjson_data = ?,
			onchainheartbeat_enabled = ?, onchainheartbeat_data = ?, onchainheartbeat_timestamp = ?,
			onchainblacklist_enabled = ?, onchainblacklist_data = ?
			where id = ?"
			, {}, $state, time, to_json ($entry), $rank, $vote_percent,
			(scalar (@$onchainbpjson_list) ? 1 : 0), $onchain{bpjson}{$owner},
			(scalar (@$onchainheartbeat_list) ? 1 : 0), $onchain{heartbeat}{$owner}{json}, $onchain{heartbeat}{$owner}{timestamp},
			(scalar (@$onchainblacklist_list) ? 1 : 0), $onchain{blacklist}{$owner},
			$$data{$owner}{id});
	}

	$dbh->do("delete from url where checked_at < ?", {}, time - (3600 * 24 * 14));
	$dbh->do("delete from producer_$chain where regproducer_at < ?", {}, time - (3600 * 9));
}

sub run_validation {
	if ($max_processes == 1) {
		doit (0);
	} else {
		my $pm = Parallel::ForkManager->new($max_processes);
		foreach my $thread_id (0 .. ($max_processes - 1)) {
			$pm->start and next; # do the fork
			warn "[$thread_id] start worker\n" if ($debug);
			doit ($thread_id);
			warn "[$thread_id] end worker\n" if ($debug);
			$pm->finish; # do the exit in the child process
		}
		$pm->wait_all_children;
	}
}

sub doit {
	my ($thread_id) = @_;

	while (1) {
		my $dbh = do_connect('validate');
		$dbh->do("update producer_$chain set thread_id = ? where status = ? and thread_id is null order by producer limit 1", {}, $thread_id, 'check');
		my $entry = $dbh->selectrow_hashref ("select * from producer_$chain where thread_id = ? and status = ?", {}, $thread_id, 'check');
		if (! $entry) {
			# nothing left to do
			return;
		}
		warn "[$thread_id] processing: $$entry{producer}\n" if ($debug);
		my $ua = eosn_cache_ua();
		my $producer = new EOSN::Validator (ua => $ua,
			dbh => $dbh,
			globals => $globals,
			properties => from_json ($$entry{regproducer_data}),
			versions => $versions,
			rank => $$entry{regproducer_rank},
			vote_percent => $$entry{regproducer_vote_percent},
			onchainbpjson_enabled => $$entry{onchainbpjson_enabled},
			onchainbpjson_data => $$entry{onchainbpjson_data},
			onchainheartbeat_enabled => $$entry{onchainheartbeat_enabled},
			onchainheartbeat_data => $$entry{onchainheartbeat_data},
			onchainheartbeat_timestamp => $$entry{onchainheartbeat_timestamp},
			onchainblacklist_enabled => $$entry{onchainblacklist_enabled},
			onchainblacklist_data => $$entry{onchainblacklist_data},
			chain => $chain,
			chain_properties => $$chains{$chain}
		);
		my $results = $producer->validate;
		#print "[$thread_id] >>> ", to_json ($results), "\n";
		$dbh->do("update producer_$chain set thread_id = null, status = ?, checked_at = ?, results_data = ? where id = ?", {}, 'hold', time, to_json ($results), $$entry{id});
	}
}

sub write_results {
	my $dbh = do_connect('validate');
	my @results;
	my $data = $dbh->selectall_arrayref("select * from producer_$chain where not results_data is null order by producer", { Slice => {}});
	foreach my $entry (@$data) {
		push (@results, from_json ($$entry{results_data}));
	}

	my $final_result = to_json ({
		meta => {generated_at => time2str("%C", time), maintainer => 'matthew@eosnation.io'},
		producers => \@results
	}, {
		pretty => 0,
		canonical => 1
	});

	if ($outfile) {
		write_file($outfile, $final_result);
	} else {
		print $final_result;
	}
}
