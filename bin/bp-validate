#!/usr/bin/perl -w

use utf8;
use strict;
use JSON;
use Parallel::ForkManager;
use EOSN::SQL qw(do_connect);
use EOSN::Validator;
use EOSN::FileUtil qw(write_file read_csv_hash);
use EOSN::UA qw(eosn_ua get_table);
use Date::Format qw(time2str);
use Getopt::Long;

binmode(STDOUT, ":utf8");

# ---------------------------------------------------------------------------
# Main

my $max_processes = 8;
my $filter_producer = undef;
my $outfile = undef;
my $versionsfile = undef;
my $limit = 1000;
my $debug = 0;

GetOptions('max_processes=i' => \$max_processes, 'producer=s' => \$filter_producer, 'output=s' => \$outfile, 'versions=s' => \$versionsfile, 'limit=i' => \$limit, 'debug' => \$debug) || exit 1;

my %filter_producers = map {$_ => 1} split (/,/, $filter_producer || '');
if (! defined $versionsfile) {
	die "$0: versions file not provided";
}
my $versions = read_csv_hash ($versionsfile, 'hash');

setup_jobs();
run_validation();
cleanup();
write_results();

# ---------------------------------------------------------------------------
# Subroutines

sub setup_jobs {
	my $ua = eosn_ua();
	my $dbh = do_connect('validate');
	my $rank = 0;
	my %onchainjson;
	my %onchainheartbeat;

	my $producer_list = get_table ($ua, "https://api.eosn.io/v1/chain/get_producers", limit => $limit);

	if (! $producer_list) {
		die "$0: cannot get producer list";
	}

	# ---- on-chain json

	my $onchainjson_list = get_table ($ua, "https://api.eosn.io/v1/chain/get_table_rows", limit => $limit, code => "producerjson", scope => "producerjson", table => "producerjson");

	if (! $onchainjson_list) {
		die "$0: cannot get onchainjson list";
	}

	foreach my $obj (@$onchainjson_list) {
		my $owner = $$obj{owner};
		my $json = $$obj{json};
		$onchainjson{$owner} = $json;
	}

	# ---- on-chain heartbeat

	my $onchainheartbeat_list = get_table ($ua, "https://api.eosn.io/v1/chain/get_table_rows", limit => $limit, code => "eosheartbeat", scope => "eosheartbeat", table => "hbstruct");

	if (! $onchainheartbeat_list) {
		die "$0: cannot get onchainheartbeat list";
	}

	foreach my $obj (@$onchainheartbeat_list) {
		my $user = $$obj{user};
		my $json = $$obj{metadata_json};
		my $timestamp = $$obj{timestamp};
		$onchainheartbeat{$user}{json} = $json;
		$onchainheartbeat{$user}{timestamp} = $timestamp;
	}

	# ----- votes

	my $vote_total = 0;
	foreach my $entry (@{$producer_list}) {
		next if (! $$entry{is_active});
		$vote_total += $$entry{total_votes};
	}

	# ---- go

	foreach my $entry (@{$producer_list}) {
		$rank++;
		my $owner = $$entry{owner};

		$dbh->do('insert ignore into producer (producer, status, regproducer_at) values (?, ?, ?)', {}, $owner, 'hold', time);

		my $vote_percent = 0;
		if ($$entry{is_active}) {
			$vote_percent = $$entry{total_votes} / $vote_total * 100;
		}
		my $state;
		my $limit;
		if (! $filter_producer) {
			print ">> normal $$entry{owner}\n" if ($debug);
			$state = 'check';
			$limit = time - 1500;

		} elsif (exists $filter_producers{$$entry{owner}}) {
			print ">> force $$entry{owner}\n" if ($debug);
			$state = 'check';
			$limit = time;

		} else {
			print ">> skip $$entry{owner}\n" if ($debug);
			$state = 'hold';
			$limit = time;
		}

		$dbh->do('update producer set status = ?, regproducer_at = ?, regproducer_data = ?, regproducer_rank = ?, regproducer_vote_percent = ?, 
			onchainjson_data = ?, onchainheartbeat_data = ?, onchainheartbeat_timestamp = ?
			where producer = ? and (checked_at < ? or checked_at is null)'
			, {}, $state, time, to_json ($entry), $rank, $vote_percent, $onchainjson{$owner}, $onchainheartbeat{$owner}{json}, $onchainheartbeat{$owner}{timestamp}, $owner, $limit);
	}
}

sub run_validation {
	if ($max_processes == 1) {
		doit (0);
	} else {
		my $pm = Parallel::ForkManager->new($max_processes);
		foreach my $thread_id (0 .. ($max_processes - 1)) {
			$pm->start and next; # do the fork
			warn "[$thread_id] start worker\n" if ($debug);
			doit ($thread_id);
			warn "[$thread_id] end worker\n" if ($debug);
			$pm->finish; # do the exit in the child process
		}
		$pm->wait_all_children;
	}
}

sub cleanup {
	my $dbh = do_connect('validate');
	$dbh->do('delete from producer where regproducer_at < ?', {}, time - (3600 * 9));
}

sub doit {
	my ($thread_id) = @_;

	while (1) {
		my $dbh = do_connect('validate');
		$dbh->do('update producer set thread_id = ? where status = ? and thread_id is null order by producer limit 1', {}, $thread_id, 'check');
		my $entry = $dbh->selectrow_hashref ('select * from producer where thread_id = ? and status = ?', {}, $thread_id, 'check');
		if (! $entry) {
			# nothing left to do
			return;
		}
		warn "[$thread_id] processing: $$entry{producer}\n" if ($debug);
		my $ua = eosn_ua();
		my $producer = new EOSN::Validator (ua => $ua,
			properties => from_json ($$entry{regproducer_data}),
			versions => $versions,
			rank => $$entry{regproducer_rank},
			vote_percent => $$entry{regproducer_vote_percent},
			onchainjson => $$entry{onchainjson_data},
			onchainheartbeat_data => $$entry{onchainheartbeat_data},
			onchainheartbeat_timestamp => $$entry{onchainheartbeat_timestamp}
		);
		my $results = $producer->validate;
		#print "[$thread_id] >>> ", to_json ($results), "\n";
		$dbh->do('update producer set thread_id = null, status = ?, checked_at = ?, results_data = ? where id = ?', {}, 'done', time, to_json ($results), $$entry{id});
	}
}

sub write_results {
	my $dbh = do_connect('validate');
	my @results;
	my $data = $dbh->selectall_arrayref('select * from producer where not results_data is null order by producer', { Slice => {}});
	foreach my $entry (@$data) {
		push (@results, from_json ($$entry{results_data}));
	}

	my $final_result = to_json ({
		meta => {generated_at => time2str("%C", time), maintainer => 'matthew@eosnation.io'},
		producers => \@results
	}, {
		pretty => 0,
		canonical => 1
	});

	if ($outfile) {
		write_file($outfile, $final_result);
	} else {
		print $final_result;
	}
}
